<?php
//
// WARNING: Do not edit by hand, this file was generated by Crank:
// https://github.com/gocardless/crank
//

namespace GoCardlessPro\Integration;

use GoCardlessPro\Environment;

abstract class IntegrationTestBase extends \PHPUnit_Framework_TestCase
{

    public function setUp()
    {
        $this->mock_http_client = $this->getMock('\GuzzleHttp\ClientInterface');
        $this->client = new \GoCardlessPro\Client(
            array(
                'access_token' => 'foobar',
                'environment' => Environment::LIVE,
                'http_client' => $this->mock_http_client
            )
        );
    }

    public function tearDown()
    {
    }

    public function load_fixture($filename)
    {
        $json_fixture_path = "./tests/fixtures/$filename.json";
        return json_decode(file_get_contents($json_fixture_path));
    }

    public function stub_request($resource_fixture)
    {
        $path = preg_replace("/:(\w+)/", "\w+", $resource_fixture->path_template);
        $path_regexp = "|" . str_replace("\\\\w\+", "\w+", preg_quote($path)) . "|";
        $json_body = json_encode($resource_fixture->body);
        $response = new \GuzzleHttp\Psr7\Response(200, [], $json_body);
        $this->mock_http_client
            ->method('request')//$resource_fixture->method)
            ->with($resource_fixture->method, $this->matchesRegularExpression($path_regexp), $this->anything())
            ->willReturn($response);
    }
}
