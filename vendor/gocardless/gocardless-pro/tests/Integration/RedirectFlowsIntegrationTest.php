<?php
//
// WARNING: Do not edit by hand, this file was generated by Crank:
// https://github.com/gocardless/crank
//

namespace GoCardlessPro\Integration;

class RedirectFlowsIntegrationTest extends IntegrationTestBase
{
    public function testResourceModelExists()
    {
        $obj = new \GoCardlessPro\Resources\RedirectFlow(array());
        $this->assertNotNull($obj);
    }
    
    public function testRedirectFlowsCreate()
    {
        $fixture = $this->load_fixture('redirect_flows')->create;
        $this->stub_request($fixture);

        $service = $this->client->redirectFlows();
        $response = call_user_func_array(array($service, 'create'), (array)$fixture->url_params);

        $body = $fixture->body->redirect_flows;
    
        $this->assertInstanceOf('\GoCardlessPro\Resources\RedirectFlow', $response);

        $this->assertEquals($body->created_at, $response->created_at);
        $this->assertEquals($body->description, $response->description);
        $this->assertEquals($body->id, $response->id);
        $this->assertEquals($body->links, $response->links);
        $this->assertEquals($body->redirect_url, $response->redirect_url);
        $this->assertEquals($body->scheme, $response->scheme);
        $this->assertEquals($body->session_token, $response->session_token);
        $this->assertEquals($body->success_redirect_url, $response->success_redirect_url);
    
    }
    
    public function testRedirectFlowsGet()
    {
        $fixture = $this->load_fixture('redirect_flows')->get;
        $this->stub_request($fixture);

        $service = $this->client->redirectFlows();
        $response = call_user_func_array(array($service, 'get'), (array)$fixture->url_params);

        $body = $fixture->body->redirect_flows;
    
        $this->assertInstanceOf('\GoCardlessPro\Resources\RedirectFlow', $response);

        $this->assertEquals($body->created_at, $response->created_at);
        $this->assertEquals($body->description, $response->description);
        $this->assertEquals($body->id, $response->id);
        $this->assertEquals($body->links, $response->links);
        $this->assertEquals($body->redirect_url, $response->redirect_url);
        $this->assertEquals($body->scheme, $response->scheme);
        $this->assertEquals($body->session_token, $response->session_token);
        $this->assertEquals($body->success_redirect_url, $response->success_redirect_url);
    
    }
    
    public function testRedirectFlowsComplete()
    {
        $fixture = $this->load_fixture('redirect_flows')->complete;
        $this->stub_request($fixture);

        $service = $this->client->redirectFlows();
        $response = call_user_func_array(array($service, 'complete'), (array)$fixture->url_params);

        $body = $fixture->body->redirect_flows;
    
        $this->assertInstanceOf('\GoCardlessPro\Resources\RedirectFlow', $response);

        $this->assertEquals($body->created_at, $response->created_at);
        $this->assertEquals($body->description, $response->description);
        $this->assertEquals($body->id, $response->id);
        $this->assertEquals($body->links, $response->links);
        $this->assertEquals($body->redirect_url, $response->redirect_url);
        $this->assertEquals($body->scheme, $response->scheme);
        $this->assertEquals($body->session_token, $response->session_token);
        $this->assertEquals($body->success_redirect_url, $response->success_redirect_url);
    
    }
    
}
